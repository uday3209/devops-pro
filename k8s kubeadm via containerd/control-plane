>> We can also use cri-o refer to sanjaya-k8s-code/new-K8S-ins-code

"" Control Panel ""
-- create ec2 instance with ubuntu os, t2.medium
sg should be allowed with all the ports in official doc 

apt update -y
apt install containerd -y
systemctl start containerd
systemctl enable containerd
sudo modprobe overlay
sudo modprobe br_netfilter


cat > /etc/modules-load.d/kubernetes.conf << EOF
br_netfilter
ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
overlay
EOF

sysctl --system
mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml

  <<-- in line number 138 SystemCgroup = true -->>
vim /etc/containerd/config.toml
systemctl restart containerd
apt-get update

apt-get install -y apt-transport-https ca-certificates curl gpg
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

   
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list


apt-get update
apt-get install -y kubelet kubeadm kubectl
systemctl enable --now kubelet
kubeadm config images pull
kubeadm init

====>  Your Kubernetes control-plane has initialized successfully!

copy and store the token:-  

kubeadm join 172.31.36.163:6443 --token bqr0gr.dglpylzgcp9972yc \
        --discovery-token-ca-cert-hash sha256:02031f80b83b71210e2cd1ea59a03d59f0ea38ff6a6efb0226eeb2c7e094cfa2

====>  To start using your cluster, you need to run the following as a regular user:
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

===> Assign role of workerNodes as worker
kubectl label node <NODE-NAME> node-role.kubernetes.io/worker=true

===> To remove assigned role
kubectl label node <NODE-NAME> node-role.kubernetes.io/worker-

===>   Creating Pod
curl https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/calico.yaml -O
kubectl apply -f calico.yaml
kubectl get pod -A
<<-- Calico is a widely used CNI (Container Network Interface) plugin that provides networking and network policy enforcement for Kubernetes clusters.  -->>

<<-- Creating a pod -->>
mkdir /project-k8s/
cd /project-k8s/
vim pod.yaml

--Copy this content --

apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
#  - containerPort: 80

cd
kubectl apply -f pod.yaml
kubectl get pods -o wide
kubectl describe pod <pod-name>
kubectl get nodes


---> ACCESSING REMOTE KUBEADM CLUSTER FROM LOCAL SERVER <---

vim /etc/ssh/sshd_config
systemctl restart ssh
systemctl enable ssh
ssh-keygen
cd .ssh
vim authorized_keys :: paste the public key of local in control-plane

cd
-->> send file from control-plane to local host
scp /etc/kubernetes/admin.conf root@<local-ip>:/root/.kube

==>> in local host
ssh root@<ip-control-plane>
export KUBECONFIG=/etc/kubernetes/admin.conf



